
'''Train a simple deep CNN a simple deep CNN on the X-CHEST small images dataset.

It gets to 96% validation accuracy in 5 epochs, and 99.6% after 100 epochs.
(it's still underfitting at that point, though).
'''

from __future__ import print_function
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os
import numpy as np
import sys
sys.path.append('dataprovider/')
from chestdataset import ChestDataSet
from ChestNet_modelSigmoid import ChestNetModeS

batch_size = 32
epochs = 100
data_augmentation = False


class LossHistory(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.losses = []
        self.descs = []

    def on_batch_end(self, batch, logs={}):
        self.losses.append(logs.get('loss'))
        self.descs.append('for batch {0}, batch size: {1}, loss: {2}, acc: {3}' \
                         .format(logs.get('batch'), logs.get('size'), logs.get('loss'), logs.get('acc')))
        fid = open('chestNet.log', 'a')
        fid.write(self.descs[-1]+'\n')
        fid.close()

    def on_epoch_end(self, epoch, logs = {}):
        desc = 'for epoch {0}, acc: {1}, loss: {2}, val_acc: {3}, val_loss: {4}' \
                         .format(epoch, logs.get('acc'), logs.get('loss'), logs.get('val_acc'), logs.get('val_loss'))
        print(desc)
        fid = open('chestNet.log', 'a')
        fid.write(desc+'\n')
        fid.close()




save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_xchest_trained_model.h5'

# The data, split between train and test sets:

#(x_train, y_train), (x_test, y_test) = cifar10.load_data()
#print('x_train shape:', x_train.shape)
#print(x_train.shape[0], 'train samples')
#print(x_test.shape[0], 'test samples')

dataset = ChestDataSet()
(x_train, y_train), (x_dev, y_dev), (x_test, y_test, _) = dataset.loadDataset(bWhiteImage = False)

x_train = x_train.astype('float32')
x_dev = x_dev.astype('float32')
x_test = x_test.astype('float32')

x_train /= 255
x_dev /= 255
x_test /= 255

fid = open('chestNet.log', 'a')
initstrs = 'parameters: train example: {0}, test example: {1}, epochs: {2}, num of batches: {3}'.format(x_train.shape[0], x_test.shape[0], epochs, batch_size)
fid.write(initstrs+'\n')
fid.close()

oModelS = ChestNetModeS()
model = oModelS.create_mode()

model.summary()
for l in model.layers:
    print (l.output_shape)



history = LossHistory()
if not data_augmentation:
    print('Not using data augmentation.')

    model.fit(x_train, y_train,
              batch_size=batch_size,
              epochs=epochs,
              validation_data=(x_dev, y_dev),
              shuffle=True, callbacks=[history])
    numpy_loss_history = np.array(history.descs)
    np.savetxt("loss_history.txt", numpy_loss_history, delimiter="\n", fmt="%s")
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=True,  # randomly flip images
        vertical_flip=True)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, y_train,
                                     batch_size=batch_size),
                        epochs=epochs,
                        validation_data=(x_test, y_test),
                        workers=4)

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
print('Saved trained model at %s ' % model_path)

# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
fid = open('chestNet.log', 'a')
fid.write('Test loss:{0}'.format(scores[0]))
fid.write('Test accuracy:{0}'.format(scores[1]))
fid.close()

